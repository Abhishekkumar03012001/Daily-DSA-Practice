# Problem :-Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

class Solution {
public:
    vector<int> func1(vector<int>& a)
    {
        int n=a.size();
        vector<int> b(n,0);
        int i=0;
        stack<int> s;
        while(i<n)
        {
            while(!s.empty() && a[s.top()]>=a[i])
                s.pop();
            if(s.empty())
                b[i]=-1;
            else
                b[i]=s.top();
            s.push(i);
            // cout<<b[i]<<" ";
            i++;
        }
        // cout<<endl;
        return b;
    }
    vector<int> func2(vector<int>& a)
    {
        int n=a.size();
        vector<int> b(n,0);
        int i=n-1;
        stack<int> s;
        while(i>=0)
        {
            while(!s.empty() && a[s.top()]>=a[i])
                s.pop();
            if(s.empty())
                b[i]=n;
            else
                b[i]=s.top();
            s.push(i);
            // cout<<b[i]<<" ";
            i--;
        }
        // reverse(b.begin(), b.end());
        return b;
    }
    int largestRectangleArea(vector<int>& heights) {
        vector<int> prev_min=func1(heights);
        vector<int> next_min=func2(heights);
        int maxAns=0;
        for(int i=0;i<heights.size();i++)
        {
            int curr=(next_min[i]-prev_min[i]-1)*heights[i];
            // cout<<next_min[i]<<" "<<prev_min[i]<<" "<<heights[i]<<endl;
            maxAns=max(curr,maxAns);
        }
        return maxAns;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        cout<<matrix.size()<<endl;
        vector<vector<int>> sol(matrix.size(),vector<int> (matrix[0].size(),0));
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                if(matrix[i][j]=='1')
                {
                    sol[i][j]=1;
                }
                cout<<sol[i][j]<<" ";
            }
            cout<<endl;
        }
        for(int i=1;i<sol.size();i++)
        {
            for(int j=0;j<sol[0].size();j++)
            {
                if(sol[i][j]!=0)
                {
                    sol[i][j]=sol[i][j]+sol[i-1][j];
                }
                cout<<sol[i][j]<<" ";
            }
            cout<<endl;
        }
        int ans=0;
        for(int i=0;i<matrix.size();i++)
            ans=max(ans,largestRectangleArea(sol[i]));
        return ans;
    }
};
